var documenterSearchIndex = {"docs":
[{"location":"#DynamicEnergyBudgets","page":"Home","title":"DynamicEnergyBudgets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:module]","category":"page"},{"location":"#DynamicEnergyBudgets.DynamicEnergyBudgets","page":"Home","title":"DynamicEnergyBudgets.DynamicEnergyBudgets","text":"DynamicEnergyBudgets\n\n(Image: ) (Image: ) (Image: Build Status) (Image: codecov.io)\n\nA Dynamic Energy Budget modelling framework written in Julia.\n\nThis is a generalised DEB model that for plant modelling, but can used to used model any kind of organism.\n\nThis models can also be run in microclimates provided by the NicheMapR R package using Microclimate.jl,  and can use wide a range of photosynthesis and stomatal conductance formulations  from Photosynthesis.jl.\n\nSee scripts at https://github.com/rafaqz/DEBplant for a live user interface and plotting examples.\n\nCode is largely adapted from the original DEBtool plant model by Bas Kooijman.\n\n(Image: Plant model)\n\n\n\n\n\n","category":"module"},{"location":"#Model","page":"Home","title":"Model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Core functions of the model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type, :function]\nPages   = [\"organism.jl\", \"model.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.AbstractOrgan","page":"Home","title":"DynamicEnergyBudgets.AbstractOrgan","text":"abstract type AbstractOrgan\n\nAbstract supertype for organs. Inherit from it if you need to difine behaviour diferent to that or Organ.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.AbstractParams","page":"Home","title":"DynamicEnergyBudgets.AbstractParams","text":"abstract type AbstractParams\n\nAstract supertype for organs parameters.  Extend to change the components that are specific to each organ.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.AbstractSharedParams","page":"Home","title":"DynamicEnergyBudgets.AbstractSharedParams","text":"abstract type AbstractSharedParams\n\nAstract supertype for shared parameters.  Extend to change the components that are shared.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.AbstractVars","page":"Home","title":"DynamicEnergyBudgets.AbstractVars","text":"abstract type AbstractVars\n\nModel variables.  Allow storing and accessing variables for use by multiple components.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.Organ","page":"Home","title":"DynamicEnergyBudgets.Organ","text":"struct Organ{P, S, V, F} <: AbstractOrgan{P,S}\n\nOrgan(params, shared, vars, J)\n\nBasic model components. For a plants, organs might be roots, stem and leaves\n\nField Description Default Bounds\nparams  nothing (0.0, 1.0)\nshared  nothing (0.0, 1.0)\nvars  nothing (0.0, 1.0)\nJ  nothing (0.0, 1.0)\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.Organ-Tuple{AbstractParams,DynamicEnergyBudgets.AbstractSharedParams,Any}","page":"Home","title":"DynamicEnergyBudgets.Organ","text":"Organ(params, shared, records)\n\nConstruct an organ from parameters, shared parameters and views into records arrays for vaiable and flux matrices.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.Plant-Tuple{}","page":"Home","title":"DynamicEnergyBudgets.Plant","text":"Plant(states=(:V, :C, :N),\n      transformations=(:asi, :gro, :mai, :rej, :res),\n      catstates=(:CN, :C, :N, :E),\n      cattransformations=(:ctb,),\n      params=(ShootParamsCN(), RootParamsCN()),\n      vars=(Vars(), Vars()),\n      shared=SharedParams(),\n      records=nothing,\n      environment=nothing,\n      time=0.0hr:1.0hr:8760.0hr,\n      environment_start=Ref(1.0hr),\n      dead=Ref(false))\n\nOuter construtor for defaults\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.define_organs-Tuple{AbstractOrganism,Any}","page":"Home","title":"DynamicEnergyBudgets.define_organs","text":"define_organs(o::AbstractOrganism, t)\n\nOrgans are constructed with views of Records and J Arrays at time t\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.Plant-Tuple{AbstractArray{#s131,1} where #s131<:Unitful.Quantity,AbstractArray{#s130,1} where #s130<:Unitful.Quantity,Any,Unitful.Quantity}","page":"Home","title":"DynamicEnergyBudgets.Plant","text":"(organism::Plant)(du, u, p, t::Number)\n\nThe Plant struct can be used as a function to run the DEB model in a solver, such as (i.e. from DiffEq).\n\ndu is the change in state vector written to by the model,  u is the vector of current state, p is a tuple or vector of parameter values,  and t is time.\n\nIf p is not nothing the model will be rebuilt with the new parameters. Note that this works with any model combination automatically as long as the number of parameters matches the number of parameters in the model. \n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.debmodel!-Tuple{Tuple,Tuple,Any}","page":"Home","title":"DynamicEnergyBudgets.debmodel!","text":"debmodel!(organs::Tuple, u::Tuple{AbstractArray}, env)\n\nA generalised multi-reserve, multi-organ Dynamic Energy Budget model.\n\nApplies metabolism, translocation and assimilation methods to 2 organs.\n\nsettings is a struct with required model data, DEBSettings or similar. t is the timestep\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.metabolism!-Tuple{Tuple,Tuple}","page":"Home","title":"DynamicEnergyBudgets.metabolism!","text":"metabolism!(organs::Tuple, u)\n\nMetabolism is an identical process for all organs, with potentially different parameters or area and rate functions.\n\n\n\n\n\n","category":"method"},{"location":"#Core-Parameters","page":"Home","title":"Core Parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nPages   = [\"core.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.growth!-Tuple{Any,Any}","page":"Home","title":"DynamicEnergyBudgets.growth!","text":"growth!(o, u)\n\nAllocates reserves to growth flux, generalised for any number of reserves.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.maintenence!-Tuple{Any,Any}","page":"Home","title":"DynamicEnergyBudgets.maintenence!","text":"Allocates reserve drain due to maintenance, generalised for any number of reserves.\n\nMaintenance is temperature dependent.\n\n\n\n\n\n","category":"method"},{"location":"#Components","page":"Home","title":"Components","text":"","category":"section"},{"location":"#Allometry","page":"Home","title":"Allometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"allometry.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.AbstractAllometry","page":"Home","title":"DynamicEnergyBudgets.AbstractAllometry","text":"abstract type AbstractAllometry\n\nAllometry. Scaling rules to relate size to mass. \n\n\n\n\n\n","category":"type"},{"location":"#Assimilation","page":"Home","title":"Assimilation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"assimilation.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.AbstractAssim","page":"Home","title":"DynamicEnergyBudgets.AbstractAssim","text":"abstract type AbstractAssim\n\nAssimilation \n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.AbstractCAssim","page":"Home","title":"DynamicEnergyBudgets.AbstractCAssim","text":"abstract type AbstractCAssim <: DynamicEnergyBudgets.AbstractAssim\n\nParent of all Carbon assimilation types\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.AbstractNAssim","page":"Home","title":"DynamicEnergyBudgets.AbstractNAssim","text":"abstract type AbstractNAssim <: DynamicEnergyBudgets.AbstractAssim\n\nParent of all Nitrogen assimilation types\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.AbstractNH4_NO3Assim","page":"Home","title":"DynamicEnergyBudgets.AbstractNH4_NO3Assim","text":"abstract type AbstractNH4_NO3Assim <: AbstractNAssim\n\nParent of Ammonia/Nitrate assimilation types\n\n\n\n\n\n","category":"type"},{"location":"#Catabolism","page":"Home","title":"Catabolism","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"catabolism.jl\"]","category":"page"},{"location":"#Environment","page":"Home","title":"Environment","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"environment.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.ManualTemperature","page":"Home","title":"DynamicEnergyBudgets.ManualTemperature","text":"struct ManualTemperature{T}\n\nManualTemperature(airtemperature, soiltemperature)\n\nEnvironment for simple manual temperature control.\n\nField Description Default Bounds\nairtemperature  nothing (0.0, 1.0)\nsoiltemperature  nothing (0.0, 1.0)\n\n\n\n\n\n","category":"type"},{"location":"#Maintenance","page":"Home","title":"Maintenance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"maintenance.jl\"]","category":"page"},{"location":"#Maturity","page":"Home","title":"Maturity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"maturity.jl\"]","category":"page"},{"location":"#Rate","page":"Home","title":"Rate","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"rate.jl\"]","category":"page"},{"location":"#Resorption","page":"Home","title":"Resorption","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"resorption.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.AbstractResorption","page":"Home","title":"DynamicEnergyBudgets.AbstractResorption","text":"abstract type AbstractResorption\n\nResorption. Parameters for reabsorbtion of nutrients from structures when metabolic rates fall.\n\n\n\n\n\n","category":"type"},{"location":"#Shape","page":"Home","title":"Shape","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"shape.jl\"]","category":"page"},{"location":"#Synthesizing-Units","page":"Home","title":"Synthesizing Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"synthesizing_units.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.MinimumRuleSU","page":"Home","title":"DynamicEnergyBudgets.MinimumRuleSU","text":"struct MinimumRuleSU <: AbstractSynthesizingUnit\n\nMinimumRuleSU(k)\n\n0-parameter synthesizing unit where law of the minimum controls the production of one compound form two other compounds.\n\n\n\n\n\n","category":"type"},{"location":"#DynamicEnergyBudgets.ParallelComplementarySU","page":"Home","title":"DynamicEnergyBudgets.ParallelComplementarySU","text":"struct ParallelComplementarySU <: AbstractSynthesizingUnit\n\nParallelComplementarySU(k)\n\n0-parameter synthesizing unita.\n\n\n\n\n\n","category":"type"},{"location":"#Temperature-Correction","page":"Home","title":"Temperature Correction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"temperature_correction.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.AbstractTemperatureCorrection","page":"Home","title":"DynamicEnergyBudgets.AbstractTemperatureCorrection","text":"abstract type AbstractTemperatureCorrection\n\nTemperature correction parameters\n\n\n\n\n\n","category":"type"},{"location":"#Translocation","page":"Home","title":"Translocation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:type]\nPages   = [\"translocation.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.LosslessPassiveTranslocation","page":"Home","title":"DynamicEnergyBudgets.LosslessPassiveTranslocation","text":"struct LosslessPassiveTranslocation <: PassiveTranslocation\n\nLosslessPassiveTranslocation)\n\nParameterless rejection where substrate rejected from synthesizing units during catabolism is returned to reserve without loss.\n\n\n\n\n\n","category":"type"},{"location":"#Other-functions","page":"Home","title":"Other functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Low-level DEB theory functions","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DynamicEnergyBudgets]\nOrder   = [:function]\nPages   = [\"functions.jl\",\"apply.jl\",\"setup.jl\"]","category":"page"},{"location":"#DynamicEnergyBudgets.half_saturation-Tuple{Any,Any,Any}","page":"Home","title":"DynamicEnergyBudgets.half_saturation","text":"half_saturation(max, half, x)\n\nHalf satration curve.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.reserve_drain!-Tuple{AbstractOrgan,Any,Any}","page":"Home","title":"DynamicEnergyBudgets.reserve_drain!","text":"reserve_drain!(o::AbstractOrgan, column, drain)\n\nGeneralised reserve drain for any flux column (ie :gro),  specified by its Symbol or Int index.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.sum_flux!-Tuple{Any,Tuple}","page":"Home","title":"DynamicEnergyBudgets.sum_flux!","text":"sum_flux!(du, organs::Tuple)\n\nSum flux matrix and write to du.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.check_params-Tuple{Tuple}","page":"Home","title":"DynamicEnergyBudgets.check_params","text":"check_params(o)\n\nCheck DEB parameters to avoid breaking mass balance. Can be pased an organ or tuple of organs.\n\n\n\n\n\n","category":"method"},{"location":"#DynamicEnergyBudgets.split_state-Tuple{Tuple,AbstractArray}","page":"Home","title":"DynamicEnergyBudgets.split_state","text":"split_state(o::Tuple, u::AbstractArray)\n\nSplit state vector into multiple views, one for each organ.\n\nWe do this recursively for type stability.\n\n\n\n\n\n","category":"method"}]
}
